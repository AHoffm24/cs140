ruby notes

puts: writes onto the screen what ever comes after it.
puts = cout;

puts 'string' * int = "string string string" if int = 3
puts 'string' + 5 does not work
put  int * 'string' does also not work

creating variables
All variable must begin with a lower case letter
example:
name = 'Adam Hoffman'
puts name  ... computer will print Adam Hoffman
can use name as a variable for anything just by stating
name = 24
name now is a variable type int pointing at the number 24

if i had 3 variables
name = 'Adam Hoffman is'
age  = 25
years = ' years old'
to print in one line you would write
puts name + age.to_s + years
prints: 'Adam Hoffman is 25 years old'

.to_s converts variable to string
similarly
.to_i = convert to integer
.to_f = convert to float
.to_s = covert to string

The Gets method
gets and chomp
gets is c++ equivalent to cin
gets mean get string like puts means output string
example:
name = gets  *will wait for keyboard input from user and fill with thats
name = gets.chomp will get rid of the stored line feed from submitting name

puts stringVar.reverse
will prints in reverse Racecar will be racecaR
stringVar.length will print string length

puts stringVar.upcase #uppercase all letters
puts stringVar.downcase #lower case all letters
puts stringVar.swapcase #will switch from upper to lower AaBbCc
puts stringVar.capitalize #will capitalize the first letter only lower casee the rest
puts ' a.'.captialize  #will only try to capitalize the whitespace char, and a will stay lower

METHODS
What are methods? There are 10 methods weve talked about so far.
Methods are really just things that do stuff.
If objects such as strings int floats etc. are nouns in ruby language,
then methods are verbs without a noun to do the verb.
example calling a tick on the clock.
Methods thus far:
puts
Gets
chomp
to_i
to_f
to_s
+
-
*
/
** = squared ex 5**2 = 5^2
     square root would = 5**0.5
% = modulus

puts var1.reverse = reverses string
string.length = will be type int of string length string.length.to_s will print length in string type
.upcase = changes the whole string to uppercase
.downcase = changes the whole string to lowercase
.swapcase = switches upper to lower and lower to upper for each individual char in string
.capitalize = upper cases first char
.center
    Centering string printing
    line_width = 50
    puts( "Old mother hubbard".center(line_width))
    put ( "sat in her cuppord".center(line_width))
    put ( "Eating her curds and whey".center(line_width))
    will center each line to one single point based off of line width.
.ljust( line_width)) left justified  #page 31
.center(line_width)) center justifed
.rjust( line_width)) right justified
puts(str.ljust(line_width/2)) + str.rjust((line_width/2)) example of what you can do

.abs = absolute value of a float.

puts(rand(101).to_s + '%chance of rain') = random number 0<= x < 101, is always LESS THAN ONLY FOR THE NUMBER GIVEN IN RAND(NUMBER)

srand = seeding
seeding is when you want the same random numbers to show up 2 or more times and ensure the random numbers will always be the same sequence
example
  srand 1976
  puts(rand(100)) # = 50
  puts(rand(100)) # = 22
  puts(rand(100)) # = 12
  put ' '                 They will be identical
  srand 1976
  puts(rand(100)) # = 50
  puts(rand(100)) # = 22
  puts(rand(100)) # = 12

MATH object           :: scope operator
put(Math::PI) =3.14...
put(Math::E)  =2.7182818
put(Math.cos(Math::PI/3) =0.500000
put(Math.tan(Math::PI/4)) =0.99999999999
put(Math.log(Math::E**2)) =2.0
put((1 + Math.sqrt(5))/2) =1.618...


FLOW CONTROL
puts 1>2  # will print false
puts 1<2  # will print true
puts 5 >= 5 # will print true
puts 5 <= 4 # will print false
puts 1 == 1 # will print true
puts 2 != 1 # will print true
puts 'cats' < 'dog' # will print true
puts 'bug lady' < 'Xander' # will print false
puts 'buglady'.downcase < 'Xander'.downcase # will print true because x will now be lower case

BRANCHING
if name == 'chris'
    puts 'what a lovely name'  # user enters chris, will print what a lovely name
else
    puts 'What a terrible name' # user didnt enter chris, will print terrible name
end

input = ''
while input != 'bye'
    puts input
    input = gets.chomp
end
puts 'come again soon.'
while true
  input = gets.chomp
  puts input
  if input == 'bye'
    break
  end
end #never ending look until bye is written by users

if name == 'chris' || name == 'Chris'
if name == 'chris' && name.downcase == 'chris'
puts !boolian will print opposite of true or false


case statement  (swtich statment essentiall) can still use if else if
x = 12
case 12
    when 0..5 # .. means between
        puts 'x is between 0 and 5'
    when 5..10 # between 10 and 15
        etc.
end




For loops
initiliazation
terminations
next cycle
statment

written as
for "identifier" in "range"
.
.
statment
end

for a..b , A is the start, b is the end. range from a to b or rangew from 1-10

for x in 1..10 #will count 1-10
    puts x
end
for x in (5..15).step(5)
    puts x
end
will print 5 10 15.

while loops
- initialization
-terminations
-statements
-next
example:
entry = ''
while entry != 'q'
    print "Enter a number: "
    num = gets.to_i
    if num % 2 == 2
        puts "#{num} is even "
    else
        puts "#{num} is odd"
    end
    puts 'any key to ocntinue (q to quit)'
    entry = gets.chomp
end
#end while loops



Array - an organized collection of items that is referenced by an index
[item1,item2,item3 ... itemi ... itemn]
size = numeber of items in an Array
n items
index = position of a paticular item1
indiceys start with 0 and count from There
item1 = position 0
item2 = position 1 = 2-1
item3 = position 2 = 3-1
itemn = position n-1
last item = size - 1
a = [item1, item2, itemn]
a.size will tell you how many items are in the Array
#############
ruby example code
a = ["bob", 1,4, 3.7, "hello"]
an array can be a variety of different types
a = [ ] empty array
how to add to an array
a << is called the shift operator
a << 'bob'
a << 1
a <<3 << 3.7 << 'hello'
now a = ["bob", 1,4, 3.7, "hello"]

a.size -  will return how many items are in the Array

a[0] will give us bob
a[1] will give us 1

###########
Hashes in ruby
important difference between array and Hashes
how to create add and retrieve items
A hash is an organized collection of items, and the way we refer to each item.
Rather than referring to each item by its index, we refer to each item as its keyboard
hashes used  { instead of brackets }
h = { key => val1, key2 => al2} # , => is know as the hash rocket
# h would reference the entire hash
###########
How to create and use hashes in ruby

h = { "name" => "bob", "age" => 37 }
h = { } empty hash
how to access items in a hash
h["name"] # get me the value that is reference by the key "name"
h["age"] # will give you 37
########
#how to add items to a hash
h["salary"] = 50000
#########
#if you reference a key that doesnt exist you can asigned  a value
#now h has 3 items
h[salary] #will give us 50000
can also use
h = { name: "bob", age: 37}
to find it you must now search this always
h[:name] the : must come before the string even though that may seem dumb, it does switch sides



###############
array with a loop
for i in 0..10

end
a = [...]
for i in 0..(a.size - 1)
  a[i]
end

or you can do
for i in a

end

0..(a.size-1) is a range
for i in a end i will take on each successive item in the array
if you did things
for i in a
  puts "i is #{i}"
end
will print each items name, as in i is the actual object of the array, going from
the first item until the last.


h={ name: "bob", age: 37, salary: 50000}
for k,v in h
  "#{k} refers to #{v}"
end
k will print the key item
v will print the value of that key for each succesive key until end
output:
name refers to bob
age refers to 37
salary refers to 50000


##########Ruby METHODS
Functional decompostion
breaking down into smaller tasks
ruby Methods -
  Unit of code referenced by some identifier and performs a particular task

method example
adds 1 to value passed into the methods

def identifier(paramerter, parameter)
      statements
      return value
end

def add1(val)
  val +=1
  return val
end

increment = add1(2)
increment now = 3


############
Code blocks to a method called
code block = a unit of code attached to a method
you would say a method yields to a code block and does whats inside the code blocks

2 types of method
mymethod do

end

mymethod{

}

example

def myMethod
  yield
end

myMethod { puts "im inside the code block"}
anything that in that code block will yield to the previous code blocks

real life method to utiliaze code blocks

arr = { 1, 3, "hello", 3.7}
# example of do end code block
arr.each do [item]  # will go through each number in the arr
  puts item
end
# will print : 1, 3, hello, 3.7
